name: CD Workflow - Building & Pushing to ECR

on:
  push:
    branches: [ "develop" ]

jobs:
  # ----------------------------------------------------------------
  # JOB 1: Docker 이미지를 빌드하고 ECR에 푸시
  # ----------------------------------------------------------------
  build-and-push-to-ecr:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    env:
      REPO_URI: ${{ secrets.ECR_REPOSITORY_URI }}

    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      # 소스 코드 다운로드/체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # ============== 사전으로 필요한 aws 설정 ==============
      # aws 자격 증명
      - name: AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # ecr 로그인
      - name: AWS Public ECR 로그인
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      # ============== docker 빌드하고 ecr로 푸쉬 ==============

      # docker Buildx 설정 (캐싱을 위해 필요)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 이미지 태그 구성 - 커밋 해시 7자리 + latest
      - name: Set Image Tag
        id: set-tag
        run: echo "image_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      # Docker 빌드 (dockerfile 사용)
      - name: Build and push Docker image with ECR cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REPO_URI }}:${{ steps.set-tag.outputs.image_tag }}
            ${{ env.REPO_URI }}:latest
          cache-from: type=registry,ref=${{ env.REPO_URI }}:buildcache
          cache-to: type=registry,ref=${{ env.REPO_URI }}:buildcache,mode=max
          platforms: linux/amd64

  # ----------------------------------------------------------------
  # JOB 2: 새 이미지를 ECS 서비스에 배포
  # ----------------------------------------------------------------
  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr

    steps:
      # aws 자격 증명 (각 job은 격리됨)
      - name: AWS CLI 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 디버깅 스텝
      - name: ECS_TASK_DEFINITION 확인
        run: |
          if [ -z "${{ secrets.ECS_TASK_DEFINITION }}" ]; then
            echo "::error:: The ECS_TASK_DEFINITION secret is empty or not set."
            exit 1
          else
            echo "ECS_TASK_DEFINITION secret is present."
            echo "Length: ${#ECS_TASK_DEFINITION}"
            # Show first few characters (safely masked by GitHub)
            echo "Value starts with: ${ECS_TASK_DEFINITION:0:10}..."
          fi

      # 기존 ECS 태스크 정의 다운로드
      - name: 기존 ECS 태스크 정의 다운로드
        run: aws ecs describe-task-definition --task-definition "${{ secrets.ECS_TASK_DEFINITION }}" --query taskDefinition > task-def.json

      # 새 ECR 이미지로 태스크 정의 업데이트
      - name: 새 ECR 이미지로 태스크 정의 업데이트
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME }}
          image: ${{ secrets.ECR_REPOSITORY_URI }}:${{ needs.build-and-push-to-ecr.outputs.image_tag }}

      # 새 태스크 정의 등록 + ECS 서비스 업데이트
      - name: 새 태스트 정의 등록
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: false

      # 배포 상태 확인
      - name: ECS 배포 상태 확인
        run: |
          aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} --query "services[0].deployments"